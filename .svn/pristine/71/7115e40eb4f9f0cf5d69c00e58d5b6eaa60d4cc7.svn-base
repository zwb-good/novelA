package com.lemon.controller;

import java.io.PrintWriter;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.lemon.pojo.Book;
import com.lemon.pojo.TitleInfo;
import com.lemon.service.BookService;
import com.lemon.utils.ChangeIds;
import com.lemon.utils.JsonMsg;
import com.lemon.utils.JsonRs;
import com.lemon.utils.NovelParser;

@Controller
@RequestMapping("/admin/BookAction")
public class BookController {

		@Autowired
		private BookService bookService;
		
		@RequestMapping("/select")
		@ResponseBody
		public JsonRs selectBook() throws Exception{
			List<Book> list = bookService.getBook();
			return new JsonRs("查询成功", true, list.size(), list);
		}
		
		@RequestMapping("/delete")
		@ResponseBody
		public JsonMsg deleteByIds(String ids) throws Exception{
			ChangeIds changeIds = new ChangeIds();
			int total = bookService.deleteBookByIds(changeIds.toInteger(ids));
			if(total > 0){
				return new JsonMsg("删除成功", true);
			}else {
				return new JsonMsg("操作失败", false);
			}
		}
		
		@RequestMapping("/search")
		@ResponseBody
		public JsonRs getByCondition(String condition) throws Exception {
			System.out.println(condition);
			List<Book> list = bookService.getByCondition(condition);
			return new JsonRs("查询成功", true, list.size(), list);
		}
		
		@RequestMapping("/insert")
		@ResponseBody
		public JsonMsg insert(Book book) throws Exception {
			int total = bookService.insert(book);
			if(total > 0){
				return new JsonMsg("添加成功", true);
			}else {
				return new JsonMsg("添加失败", false);
			}
		}
		
		@RequestMapping("/update")
		@ResponseBody
		public JsonMsg updateByPrimaryKeySelective(Book book) throws Exception {
			int total = bookService.updateByPrimaryKeySelective(book);
			if(total > 0){
				return new JsonMsg("更新成功", true);
			}else {
				return new JsonMsg("更新失败", false);
			}
		}
		
		@RequestMapping("/novelIntroduce")
		@ResponseBody
		public void selectById(Integer bookId,String callback,
				HttpServletResponse response) throws Exception {
			response.setContentType("application/json;charset=utf-8");
			try {
				List<Book> list = bookService.selectById(bookId);
				PrintWriter out = response.getWriter();
				out.print(callback + "(" + new Gson().toJson(new JsonRs("查询成功", true, list.size(), list)) + ")");
				out.flush();
				out.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		@RequestMapping("/searchByPhone")
		@ResponseBody
		public void getByConditionPhone(String condition,String callback,
				HttpServletResponse response) throws Exception {
			response.setContentType("application/json;charset=utf-8");
			try {
				List<Book> list = bookService.getByConditionPhone(condition);
				PrintWriter out = response.getWriter();
				if(list.isEmpty()){
					out.print(callback + "(" + new Gson().toJson(new JsonRs("错误的condition", false, list.size(), list)) + ")");
				}else {
					out.print(callback + "(" + new Gson().toJson(new JsonRs("查询成功", true, list.size(), list)) + ")");
				}
				out.flush();
				out.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
}
