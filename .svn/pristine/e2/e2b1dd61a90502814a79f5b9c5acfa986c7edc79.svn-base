<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lemon.dao.CollectbookMapper">
  <resultMap id="BaseResultMap" type="com.lemon.pojo.Collectbook">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userId" jdbcType="INTEGER" property="userId" />
    <result column="bookId" jdbcType="INTEGER" property="bookId" />
    <result column="chapter" jdbcType="INTEGER" property="chapter" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
  </resultMap>
  <resultMap id="AndBookResultMap" type="com.lemon.pojo.Collectbook">
    <id column="collectbook_id" jdbcType="INTEGER" property="id" />
    <result column="collectbook_userId" jdbcType="INTEGER" property="userId" />
    <result column="collectbook_bookId" jdbcType="INTEGER" property="bookId" />
    <result column="collectbook_chapter" jdbcType="INTEGER" property="chapter" />
    <result column="collectbook_time" jdbcType="TIMESTAMP" property="time" />
    <association property="book" javaType="com.lemon.pojo.Book">
      <id column="book_id" property="id" />
      <result column="book_name" property="name" />
      <result column="book_author" property="author" />
      <result column="book_url" property="url" />
      <result column="book_novelTypeId" property="novelTypeId" />
      <result column="book_abstractText" property="abstractText" />
    </association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userId, bookId, chapter, time
  </sql>
  <sql id="AndBook_Column_List">
    book.id as book_id,
	book.`name` as book_name,
	book.author as book_author,
	book.url as book_url,
	book.novelTypeId as book_novelTypeId,
	book.abstractText as book_abstractText,
    collectbook.id as collectbook_id, 
    collectbook.userId as collectbook_userId, 
    collectbook.bookId as collectbook_bookId, 
    collectbook.chapter as collectbook_chapter, 
    collectbook.time as collectbook_time
  </sql>
  <select id="selectByExampleAndBook" parameterType="com.lemon.pojo.CollectbookExample" resultMap="AndBookResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="AndBook_Column_List" />
    FROM book INNER JOIN collectbook ON collectbook.bookId = book.id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKeyAndBook" parameterType="java.lang.Integer" resultMap="AndBookResultMap">
    select 
    <include refid="AndBook_Column_List" />
    FROM book INNER JOIN collectbook ON collectbook.bookId = book.id
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByExample" parameterType="com.lemon.pojo.CollectbookExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from collectbook
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from collectbook
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByIds" parameterType="java.lang.Integer">
    delete from collectbook where id in
    <foreach item="id" collection="array" open="(" separator="," close=")">
      #{id,jdbcType=INTEGER}
    </foreach>
  </delete>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from collectbook
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lemon.pojo.CollectbookExample">
    delete from collectbook
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lemon.pojo.Collectbook">
    insert into collectbook (id, userId, bookId, 
      chapter, time)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{bookId,jdbcType=INTEGER}, 
      #{chapter,jdbcType=INTEGER}, #{time,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.lemon.pojo.Collectbook">
    insert into collectbook
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        userId,
      </if>
      <if test="bookId != null">
        bookId,
      </if>
      <if test="chapter != null">
        chapter,
      </if>
      <if test="time != null">
        time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="bookId != null">
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="chapter != null">
        #{chapter,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lemon.pojo.CollectbookExample" resultType="java.lang.Long">
    select count(*) from collectbook
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update collectbook
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        userId = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.bookId != null">
        bookId = #{record.bookId,jdbcType=INTEGER},
      </if>
      <if test="record.chapter != null">
        chapter = #{record.chapter,jdbcType=INTEGER},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update collectbook
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userId,jdbcType=INTEGER},
      bookId = #{record.bookId,jdbcType=INTEGER},
      chapter = #{record.chapter,jdbcType=INTEGER},
      time = #{record.time,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lemon.pojo.Collectbook">
    update collectbook
    <set>
      <if test="userId != null">
        userId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="bookId != null">
        bookId = #{bookId,jdbcType=INTEGER},
      </if>
      <if test="chapter != null">
        chapter = #{chapter,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lemon.pojo.Collectbook">
    update collectbook
    set userId = #{userId,jdbcType=INTEGER},
      bookId = #{bookId,jdbcType=INTEGER},
      chapter = #{chapter,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>